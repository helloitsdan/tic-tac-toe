<testsuites name="jest tests" tests="72" failures="0" time="13.450999999999999">
  <testsuite name="GameResult" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:07" time="1.697" tests="4">
    <testcase classname="GameResult renders" name="GameResult renders" time="0.044">
    </testcase>
    <testcase classname="GameResult renders a message for a draw" name="GameResult renders a message for a draw" time="0.019">
    </testcase>
    <testcase classname="GameResult renders a message when player one wins" name="GameResult renders a message when player one wins" time="0.016">
    </testcase>
    <testcase classname="GameResult renders a message when player two wins" name="GameResult renders a message when player two wins" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Game" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:07" time="1.701" tests="1">
    <testcase classname="Game renders" name="Game renders" time="0.096">
    </testcase>
  </testsuite>
  <testsuite name="gameState" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:08" time="0.37" tests="4">
    <testcase classname="gameState checks for matches when the saga is run" name="gameState checks for matches when the saga is run" time="0.008">
    </testcase>
    <testcase classname="gameState dispatches win game event if a match is found" name="gameState dispatches win game event if a match is found" time="0.002">
    </testcase>
    <testcase classname="gameState dispatches finish game event if the board is full" name="gameState dispatches finish game event if the board is full" time="0.001">
    </testcase>
    <testcase classname="switchActivePlayer changes the active player after every piece played" name="switchActivePlayer changes the active player after every piece played" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TicTacToe" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:08" time="0.603" tests="1">
    <testcase classname="TicTacToe renders" name="TicTacToe renders" time="0.057">
    </testcase>
  </testsuite>
  <testsuite name="O" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:09" time="0.462" tests="1">
    <testcase classname="O renders" name="O renders" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="allowMove" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:09" time="0.476" tests="5">
    <testcase classname="allowMove returns false when the game has ended" name="allowMove returns false when the game has ended" time="0.001">
    </testcase>
    <testcase classname="allowMove returns false if the chosen space is occupied" name="allowMove returns false if the chosen space is occupied" time="0.001">
    </testcase>
    <testcase classname="allowMove returns true if the move is valid" name="allowMove returns true if the move is valid" time="0.002">
    </testcase>
    <testcase classname="useBoard returns a set of board positions from state" name="useBoard returns a set of board positions from state" time="0.014">
    </testcase>
    <testcase classname="useBoard returns a callback which dispatches the place piece action" name="useBoard returns a callback which dispatches the place piece action" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Status" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:07" time="2.888" tests="4">
    <testcase classname="Status renders" name="Status renders" time="0.042">
    </testcase>
    <testcase classname="Status renders turn status when the game is being played" name="Status renders turn status when the game is being played" time="0.013">
    </testcase>
    <testcase classname="Status renders a result when the game has finished" name="Status renders a result when the game has finished" time="0.004">
    </testcase>
    <testcase classname="Status reset game button dispatches reset action" name="Status reset game button dispatches reset action" time="0.083">
    </testcase>
  </testsuite>
  <testsuite name="Background" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:09" time="0.533" tests="1">
    <testcase classname="Background renders" name="Background renders" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="Board" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:09" time="0.395" tests="2">
    <testcase classname="Board renders" name="Board renders" time="0.058">
    </testcase>
    <testcase classname="Board renders a square for every board position" name="Board renders a square for every board position" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="getPlayers" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.254" tests="4">
    <testcase classname="getPlayers returns the current players from the state" name="getPlayers returns the current players from the state" time="0.001">
    </testcase>
    <testcase classname="getMoves returns current moves from the state" name="getMoves returns current moves from the state" time="0.001">
    </testcase>
    <testcase classname="getStatus returns current game status from the state" name="getStatus returns current game status from the state" time="0">
    </testcase>
    <testcase classname="getWinner returns the winning match from the state" name="getWinner returns the winning match from the state" time="0">
    </testcase>
  </testsuite>
  <testsuite name="X" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.39" tests="1">
    <testcase classname="X renders" name="X renders" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="TurnStatus" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.362" tests="3">
    <testcase classname="TurnStatus renders" name="TurnStatus renders" time="0.033">
    </testcase>
    <testcase classname="TurnStatus renders the name of the currently active player" name="TurnStatus renders the name of the currently active player" time="0.015">
    </testcase>
    <testcase classname="TurnStatus handles unknown players" name="TurnStatus handles unknown players" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="PlayerIcon" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.353" tests="3">
    <testcase classname="PlayerIcon renders" name="PlayerIcon renders" time="0.004">
    </testcase>
    <testcase classname="PlayerIcon renders an icon for player one" name="PlayerIcon renders an icon for player one" time="0.03">
    </testcase>
    <testcase classname="PlayerIcon renders an icon for player two" name="PlayerIcon renders an icon for player two" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="placePiece" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.311" tests="5">
    <testcase classname="placePiece creates place piece action correctly" name="placePiece creates place piece action correctly" time="0.002">
    </testcase>
    <testcase classname="winGame creates win game action correctly" name="winGame creates win game action correctly" time="0.001">
    </testcase>
    <testcase classname="finishGame creates finish game action correctly" name="finishGame creates finish game action correctly" time="0">
    </testcase>
    <testcase classname="resetGame creates reset game action correctly" name="resetGame creates reset game action correctly" time="0.009">
    </testcase>
    <testcase classname="changePlayer creates change player action correctly" name="changePlayer creates change player action correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isMatchInMoves" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.246" tests="8">
    <testcase classname="isMatchInMoves returns true if all match positions are in the provided move positions" name="isMatchInMoves returns true if all match positions are in the provided move positions" time="0.001">
    </testcase>
    <testcase classname="isMatchInMoves returns false if not all match positions can be found" name="isMatchInMoves returns false if not all match positions can be found" time="0">
    </testcase>
    <testcase classname="findMatchInMoves returns details of a match in the provided PlayerMoves set" name="findMatchInMoves returns details of a match in the provided PlayerMoves set" time="0.001">
    </testcase>
    <testcase classname="findMatchInMoves returns undefined if no matches can be found" name="findMatchInMoves returns undefined if no matches can be found" time="0">
    </testcase>
    <testcase classname="findMatchInMoves only returns details of the first found match" name="findMatchInMoves only returns details of the first found match" time="0">
    </testcase>
    <testcase classname="findMatch returns a match if one can be found" name="findMatch returns a match if one can be found" time="0">
    </testcase>
    <testcase classname="findMatch can return a match for any player" name="findMatch can return a match for any player" time="0">
    </testcase>
    <testcase classname="findMatch returns undefined if no match can be found" name="findMatch returns undefined if no match can be found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="players reducer" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.195" tests="3">
    <testcase classname="players reducer returns the current state in response to an unknown action" name="players reducer returns the current state in response to an unknown action" time="0.001">
    </testcase>
    <testcase classname="players reducer responds to game reset action with the default state" name="players reducer responds to game reset action with the default state" time="0">
    </testcase>
    <testcase classname="players reducer updates the current state in response to a change player action" name="players reducer updates the current state in response to a change player action" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BoardGrid" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.309" tests="1">
    <testcase classname="BoardGrid renders" name="BoardGrid renders" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="BoardSquare" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:10" time="0.389" tests="2">
    <testcase classname="BoardSquare renders" name="BoardSquare renders" time="0.027">
    </testcase>
    <testcase classname="BoardSquare calls onSelect when clicked" name="BoardSquare calls onSelect when clicked" time="0.069">
    </testcase>
  </testsuite>
  <testsuite name="isBoardFull" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:11" time="0.202" tests="2">
    <testcase classname="isBoardFull returns true if all board positions have been filled" name="isBoardFull returns true if all board positions have been filled" time="0.001">
    </testcase>
    <testcase classname="isBoardFull returns false if not all board positions have been filled" name="isBoardFull returns false if not all board positions have been filled" time="0">
    </testcase>
  </testsuite>
  <testsuite name="status reducer" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:11" time="0.269" tests="3">
    <testcase classname="status reducer responds to unknown actions with the current state" name="status reducer responds to unknown actions with the current state" time="0">
    </testcase>
    <testcase classname="status reducer responds to game reset action with the default state" name="status reducer responds to game reset action with the default state" time="0">
    </testcase>
    <testcase classname="status reducer updates the current state in response to a finish game action" name="status reducer updates the current state in response to a finish game action" time="0">
    </testcase>
  </testsuite>
  <testsuite name="movesReducer" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:11" time="0.24" tests="3">
    <testcase classname="movesReducer returns the current state in response to an unknown action" name="movesReducer returns the current state in response to an unknown action" time="0.001">
    </testcase>
    <testcase classname="movesReducer responds to game reset action with the default state" name="movesReducer responds to game reset action with the default state" time="0.012">
    </testcase>
    <testcase classname="movesReducer updates the current state in response to a place piece action" name="movesReducer updates the current state in response to a place piece action" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="winner reducer" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:11" time="0.228" tests="3">
    <testcase classname="winner reducer responds to unknown actions with the current state" name="winner reducer responds to unknown actions with the current state" time="0.001">
    </testcase>
    <testcase classname="winner reducer responds to game reset action with the default state" name="winner reducer responds to game reset action with the default state" time="0">
    </testcase>
    <testcase classname="winner reducer updates the current state in response to a game win action" name="winner reducer updates the current state in response to a game win action" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getNextPlayerId" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:11" time="0.201" tests="3">
    <testcase classname="getNextPlayerId returns the piece of the next available player in the provided list" name="getNextPlayerId returns the piece of the next available player in the provided list" time="0.001">
    </testcase>
    <testcase classname="getNextPlayerId wraps around if the current player is the last in the provided list" name="getNextPlayerId wraps around if the current player is the last in the provided list" time="0">
    </testcase>
    <testcase classname="getNextPlayerId falls back to the first player in the provided list if the current cannot be found" name="getNextPlayerId falls back to the first player in the provided list if the current cannot be found" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isSpaceOccupied" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:11" time="0.201" tests="4">
    <testcase classname="isSpaceOccupied returns true when the specified space is occupied in the provided game" name="isSpaceOccupied returns true when the specified space is occupied in the provided game" time="0">
    </testcase>
    <testcase classname="isSpaceOccupied returns false when the specified space is free" name="isSpaceOccupied returns false when the specified space is free" time="0.001">
    </testcase>
    <testcase classname="isValidMove returns true when the specified space is empty in the provided game" name="isValidMove returns true when the specified space is empty in the provided game" time="0">
    </testcase>
    <testcase classname="isValidMove returns false when the specified space is occupied" name="isValidMove returns false when the specified space is occupied" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getBoardPositionsFromMoves" errors="0" failures="0" skipped="0" timestamp="2020-02-22T15:29:11" time="0.176" tests="1">
    <testcase classname="getBoardPositionsFromMoves converts a game moves object into a dictionary of game positions" name="getBoardPositionsFromMoves converts a game moves object into a dictionary of game positions" time="0">
    </testcase>
  </testsuite>
</testsuites>